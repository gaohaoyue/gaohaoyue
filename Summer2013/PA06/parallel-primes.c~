
/**
 * The ENTIRE assignment should be completed within this file
 */

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <math.h>
#include <pthread.h>

#include "pa06.h"

/**
 * Read a uint128 from a string.
 * This function is provided for your convenience.
 */
uint128 alphaTou128(const char * str)
{
  uint128 ret = 0;
  while(*str >= '0' && *str <= '9') {
    ret *= 10; // "left-shift" a base-ten number
    ret += (*str - '0'); // add in the units
    ++str;
  }
  return ret;
}

/**
 * The caller is responsible for freeing the result 
 */
char * u128ToString(uint128 value)
{
  return NULL;
}

/**
 * Test is 'value' is prime.
 * 'n_threads' is the number of threads to create to complete this computation.
 * Return TRUE of FALSE.
 * 
 * LEAK NO MEMORY
 *
 * Good luck!
 */

/
int primalityTestParallel(uint128 value, int n_threads)
{
  /*
  uint128 n = value;
  if(n == 2)
    {
      return 1;
    }
  if (n % 2 == 0) 
    return 0;
  long int max = floor(sqrt(n));
  long int i;
  for (i = 3; i < max; i+=2) 
    {
      if (n % i === 0) 
	return 0;
    }	
    return 1;*/
  pthread_t thread[n_threads];
  //struct ThreadData data[NUMTHREADS];
  int i;
  

  for (i=0; i<n_threads; i++) 
    {
      pthread_create(&thread[i], NULL, primecheck, &data[i]);
    }

  for (i=0; i<n_threads; i++)
    {
      pthread_join(thread[i], NULL);
    }
}



primecheck(uint128 n)
{
  if(n == 2)
    {
      return 1;
    }
  if (n % 2 == 0) 
    return 0;
  long int max = floor(sqrt(n));
  long int i;
  for (i = 3; i < max; i+=2) 
    {
      if (n % i === 0) 
	return 0;
    }	
  return 1;
}

